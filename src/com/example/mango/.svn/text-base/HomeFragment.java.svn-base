package com.example.mango;

import it.gmariotti.cardslib.library.internal.Card;
import it.gmariotti.cardslib.library.internal.CardHeader;
import it.gmariotti.cardslib.library.internal.base.BaseCard;
import it.gmariotti.cardslib.library.prototypes.CardWithList;
import it.gmariotti.cardslib.library.prototypes.LinearListView;
import it.gmariotti.cardslib.library.view.CardView;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import android.app.Fragment;
import android.app.FragmentTransaction;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Parcelable;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.TextView;
import android.widget.Toast;

import com.example.tools.BitmapUtil;
import com.example.widget.GalleryFlow;

public class HomeFragment extends Fragment implements OnClickListener {
	/**
	 * The fragment argument representing the section number for this fragment.
	 */

	GalleryFlow mGallery = null;
	ArrayList<BitmapDrawable> mBitmaps = new ArrayList<BitmapDrawable>();
	
	Button search = null;

	// 图片左右滑动
	private ViewPager viewPager; // android-support-v4中的滑动组件
	private List<ImageView> imageViews; // 滑动的图片集合

	private String[] titles; // 图片标题
	private int[] imageResId; // 图片ID
	private List<View> dots; // 图片标题正文的那些点

	private TextView tv_title;
	private int currentItem = 300; // 当前图片的索引号

	private static final String ARG_SECTION_NUMBER = "section_number";

	private ScheduledExecutorService scheduledExecutorService;

	// 切换当前显示的图片
	private Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			viewPager.setCurrentItem(currentItem);
			// 切换当前显示的图片
		};
	};

	/**
	 * Returns a new instance of this fragment for the given section number.
	 */
	public static HomeFragment newInstance(int sectionNumber) {
		HomeFragment fragment = new HomeFragment();
		Bundle args = new Bundle();
		args.putInt(ARG_SECTION_NUMBER, sectionNumber);
		fragment.setArguments(args);
		return fragment;
	}

	public HomeFragment() {
		
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.fragment_main, container,
				false);
		search = (Button)getActivity().findViewById(R.id.search);
		// 初始化gallery
		// gallery clicklistener
		AdapterView.OnItemClickListener listener = new AdapterView.OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				Toast.makeText(getActivity(), "Correct!",Toast.LENGTH_SHORT).show();
				search.setVisibility(View.INVISIBLE);
				BookFragment bookFragment = new BookFragment();
				FragmentTransaction transaction = getFragmentManager().beginTransaction();
				transaction.replace(R.id.mainfragment, bookFragment);
				transaction.addToBackStack(null);
				transaction.commit();

				Toast.makeText(getActivity(), "Wrong!",Toast.LENGTH_SHORT).show();
			}
		};
		generateBitmaps();
		mGallery = (GalleryFlow) rootView.findViewById(R.id.gallery1);
		mGallery.setSpacing(-60);
		mGallery.setFadingEdgeLength(0);
		mGallery.setGravity(Gravity.CENTER);
		mGallery.setAdapter(new GalleryAdapter());
		mGallery.setMaxZoom(0);
		mGallery.setSelection(mBitmaps.size() * 100);
		mGallery.setUnselectedAlpha(0.3f);
		mGallery.setOnItemClickListener(listener);
		// 初始化viewpager
		imageResId = new int[] { R.drawable.ac1, R.drawable.ac2, R.drawable.ac3 };
		titles = new String[imageResId.length];
		titles[0] = "精美童书  5折封顶";
		titles[1] = "开学装备一站购齐";
		titles[2] = "9月新书速递";

		
		//card*********************************************
//		ActivityCard card  = new ActivityCard(getActivity());
//		card.init();
//		CardView cardView = (CardView) rootView.findViewById(R.id.carddemo);
//        cardView.setCard(card);
        //cardView.getBackground().setAlpha(0);
		
		imageViews = new ArrayList<ImageView>();
		// 初始化viewpager图片资源
		for (int i = 0; i < imageResId.length; i++) {
			ImageView imageView = new ImageView(getActivity());
			imageView.setImageResource(imageResId[i]);
			imageView.setScaleType(ScaleType.CENTER_CROP);
			imageViews.add(imageView);
		}

		dots = new ArrayList<View>();
		dots.add(rootView.findViewById(R.id.v_dot0));
		dots.add(rootView.findViewById(R.id.v_dot1));
		dots.add(rootView.findViewById(R.id.v_dot2));

		tv_title = (TextView) rootView.findViewById(R.id.tv_title);
		tv_title.setText(titles[0]);

		viewPager = (ViewPager) rootView.findViewById(R.id.image_slide_page);
		// 设置填充ViewPager页面的适配器
		viewPager.setAdapter(new MyAdapter());
		// 设置一个监听器，当ViewPager中的页面改变时调用
		viewPager.setCurrentItem(imageResId.length * 100);
		viewPager.setOnPageChangeListener(new MyPageChangeListener());
		return rootView;
	}

	
	public void onStart() {
		scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
		// 当Activity显示出来后，每两秒钟切换一次图片显示
		scheduledExecutorService.scheduleAtFixedRate(new ScrollTask(), 2, 2,
				TimeUnit.SECONDS);
		super.onStart();
	}

	@Override
	public void onStop() {
		// 当Activity不可见的时候停止切换
		scheduledExecutorService.shutdown();
		super.onStop();
	}

	// 换行切换任务
	private class ScrollTask implements Runnable {

		public void run() {
			synchronized (viewPager) {
				System.out.println("currentItem: " + currentItem);
				currentItem ++;
				handler.obtainMessage().sendToTarget(); // 通过Handler切换图片
			}
		}

	}

	// 当ViewPager中页面的状态发生改变时调用
	private class MyPageChangeListener implements OnPageChangeListener {
		private int oldPosition = 300;

		/**
		 * This method will be invoked when a new page becomes selected.
		 * position: Position index of the new selected page.
		 */
		public void onPageSelected(int position) {
			currentItem = position;
			tv_title.setText(titles[position % imageResId.length]);
			dots.get(oldPosition % imageResId.length).setBackgroundResource(R.drawable.dot_normal);
			dots.get(position % imageResId.length).setBackgroundResource(R.drawable.dot_focused);
			oldPosition = position;
		}

		public void onPageScrollStateChanged(int arg0) {

		}

		public void onPageScrolled(int arg0, float arg1, int arg2) {

		}
	}
	
//	public class ActivityCard extends CardWithList {
//
//        public ActivityCard(Context context) {
//            super(context);
//        }
//
//		@Override
//		protected CardHeader initCardHeader() {
//			// TODO Auto-generated method stub
//			//Add Header
//	        CardHeader header = new CardHeader(getContext());
//	        header.setType(TRIM_MEMORY_BACKGROUND);
//	        //Add a popup menu. This method set OverFlow button to visible
//	        header.setTitle("九月限量"); //should use R.string.
//	        //Add a popup menu. This method set OverFlow button to visible
//	        header.setPopupMenu(R.menu.popup_item, new CardHeader.OnClickCardHeaderPopupMenuListener() {
//	            @Override
//	            public void onMenuItemClick(BaseCard card, MenuItem item) {
//
//	                switch (item.getItemId()){
//	                    case R.id.action_add:
//	                        //Example: add an item
//	                        WeatherObject w1= new WeatherObject(ActivityCard.this);
//	                        w1.city ="Madrid";
//	                        w1.temperature = 24;
//	                        w1.weatherIcon = R.drawable.ic_action_sun;
//	                        w1.setObjectId(w1.city);
//	                        mLinearListAdapter.add(w1);
//	                        break;
//	                    case R.id.action_remove:
//	                        //Example: remove an item
//	                        mLinearListAdapter.remove(mLinearListAdapter.getItem(0));
//	                        break;
//	                }
//
//	            }
//	        });
//	        return header;
//	    }
//
//	    @Override
//	    protected void initCard() {
//
//	        //Set the whole card as swipeable
//	        setSwipeable(true);
//	        setOnSwipeListener(new OnSwipeListener() {
//	            @Override
//	            public void onSwipe(Card card) {
//	                Toast.makeText(getContext(), "Swipe on " + card.getCardHeader().getTitle(), Toast.LENGTH_SHORT).show();
//	            }
//	        });
//
//	    }
//
//
//	    @Override
//	    protected List<ListObject> initChildren() {
//
//	        //Init the list
//	        List<ListObject> mObjects = new ArrayList<ListObject>();
//
//	        //Add an object to the list
//	        WeatherObject w1= new WeatherObject(this);
//	        w1.city ="London";
//	        w1.temperature = 16;
//	        w1.weatherIcon = R.drawable.ic_action_cloud;
//	        w1.setObjectId(w1.city); //It can be important to set ad id
//	        mObjects.add(w1);
//
//	        WeatherObject w2= new WeatherObject(this);
//	        w2.city ="Rome";
//	        w2.temperature = 25;
//	        w2.weatherIcon = R.drawable.ic_action_sun;
//	        w2.setObjectId(w2.city);
//	        w2.setSwipeable(true);
//
//	        //Example onSwipe
//	        /*w2.setOnItemSwipeListener(new OnItemSwipeListener() {
//	            @Override
//	            public void onItemSwipe(ListObject object,boolean dismissRight) {
//	                Toast.makeText(getContext(), "Swipe on " + object.getObjectId(), Toast.LENGTH_SHORT).show();
//	            }
//	        });*/
//	        mObjects.add(w2);
//
//	        WeatherObject w3= new WeatherObject(this);
//	        w3.city ="Paris";
//	        w3.temperature = 19;
//	        w3.weatherIcon = R.drawable.ic_action_cloudy;
//	        w3.setObjectId(w3.city);
//	        mObjects.add(w3);
//
//	        return mObjects;
//	    }
//
//	    @Override
//	    public View setupChildView(int childPosition, ListObject object, View convertView, ViewGroup parent) {
//
//	        //Setup the ui elements inside the item
//	        TextView city = (TextView) convertView.findViewById(R.id.carddemo_weather_city);
//	        ImageView icon = (ImageView) convertView.findViewById(R.id.carddemo_weather_icon);
//	        TextView temperature = (TextView) convertView.findViewById(R.id.carddemo_weather_temperature);
//
//	        //Retrieve the values from the object
//	        WeatherObject weatherObject= (WeatherObject)object;
//	        icon.setImageResource(weatherObject.weatherIcon);
//	        city.setText(weatherObject.city);
//	        temperature.setText(weatherObject.temperature + weatherObject.temperatureUnit);
//	        
//	        return  convertView;
//	    }
//
//	    @Override
//	    public int getChildLayoutId() {
//	        return R.layout.carddemo_googlenowweather_inner_main;
//	    }
//
//
//
//	    // -------------------------------------------------------------
//	    // Weather Object
//	    // -------------------------------------------------------------
//
//	    public class WeatherObject extends DefaultListObject{
//
//	        public String city;
//	        public int weatherIcon;
//	        public int temperature;
//	        public String temperatureUnit="掳C";
//
//	        public WeatherObject(Card parentCard){
//	            super(parentCard);
//	            init();
//	        }
//
//	        private void init(){
//	            //OnClick Listener
//	            setOnItemClickListener(new OnItemClickListener() {
//	                @Override
//	                public void onItemClick(LinearListView parent, View view, int position, ListObject object) {
//	                    Toast.makeText(getContext(), "Click on " + getObjectId(), Toast.LENGTH_SHORT).show();
//	                }
//	            });
//
//	            //OnItemSwipeListener
//	            setOnItemSwipeListener(new OnItemSwipeListener() {
//	                @Override
//	                public void onItemSwipe(ListObject object, boolean dismissRight) {
//	                    Toast.makeText(getContext(), "Swipe on " + object.getObjectId(), Toast.LENGTH_SHORT).show();
//	                }
//	            });
//	        }
//	    }
//	}
//	
	// 填充ViewPager页面的适配器
	private class MyAdapter extends PagerAdapter {

		@Override
		public int getCount() {
			return Integer.MAX_VALUE;
			//return imageResId.length;
		}

		@Override
		public Object instantiateItem(View arg0, int pos) {

			View view = imageViews.get(pos % imageResId.length);
			view.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					Toast.makeText(getActivity(), "activity!",
							Toast.LENGTH_SHORT).show();
				}
			});
			try {
				((ViewPager) arg0).addView(view);
			} catch (Exception e) {
				
			}
			
			return view;
		}

		@Override
		public void destroyItem(View arg0, int arg1, Object arg2) {
			//((ViewPager) arg0).removeView(imageViews.get(arg1 % imageResId.length));
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			return arg0 == arg1;
		}

		@Override
		public void restoreState(Parcelable arg0, ClassLoader arg1) {

		}

		@Override
		public Parcelable saveState() {
			return null;
		}

		@Override
		public void startUpdate(View arg0) {

		}

		@Override
		public void finishUpdate(View arg0) {

		}
	}

	// 初始化gallery图片资源
	private void generateBitmaps() {
		int i = 0;
		int[] ids = { R.drawable.book1, R.drawable.book2, R.drawable.book3, };
		String[] names = {"PHP和MySQL web开发","Don't Make Me Think","C Primer Plus(第五版)"};
		for (int id : ids) {
			Bitmap bitmap = createReflectedBitmapById(id,names[i]);
			if (null != bitmap) {
				BitmapDrawable drawable = new BitmapDrawable(bitmap);
				drawable.setAntiAlias(true);
				mBitmaps.add(drawable);
			}
			i++;
		}
	}

	// gallery图片效果制作
	private Bitmap createReflectedBitmapById(int resId, String s) {
		Drawable drawable = getResources().getDrawable(resId);
		if (drawable instanceof BitmapDrawable) {
			Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
			Bitmap reflectedBitmap = BitmapUtil.createReflectedBitmap(bitmap,s);

			return reflectedBitmap;
		}

		return null;
	}

	// GalleryAdapter
	private class GalleryAdapter extends BaseAdapter {
		@Override
		public int getCount() {
			return Integer.MAX_VALUE;
			// return mBitmaps.size();
		}

		@Override
		public Object getItem(int position) {
			return null;
		}

		@Override
		public long getItemId(int position) {
			return 0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			if (null == convertView) {
				convertView = new MyImageView(getActivity());
				convertView.setLayoutParams(new Gallery.LayoutParams(220, 368));
			}

			ImageView imageView = (ImageView) convertView;
			imageView.setImageDrawable(mBitmaps.get((position + 2)
					% mBitmaps.size()));
			imageView.setScaleType(ScaleType.FIT_XY);
			imageView.setBackgroundColor(Color.alpha(1));

			return imageView;
		}
	}

	// gallerry attr
	private class MyImageView extends ImageView {
		public MyImageView(Context context) {
			this(context, null);
		}

		public MyImageView(Context context, AttributeSet attrs) {
			super(context, attrs, 0);
		}

		public MyImageView(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
		}

		protected void onDraw(Canvas canvas) {
			super.onDraw(canvas);
		}
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		
	}
}